name: "üê≥ Docker Build & Publish"

on:
  push:
    branches: [ "master" ]
    tags: [ 'v*.*.*' ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  test:
    name: "üß™ Run Tests"
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    outputs:
      version: ${{ steps.pokemmo_version.outputs.version }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Get PokeMMO Version
        id: pokemmo_version
        run: |
          mkdir -p /tmp/pokemmo
          wget -q https://pokemmo.com/download_file/1/ -O /tmp/pokemmo/PokeMMO-Client.zip
          unzip -qq /tmp/pokemmo/PokeMMO-Client.zip -d /tmp/pokemmo
          VERSION=$(cat /tmp/pokemmo/revision.txt)
          echo "version=${VERSION}" >> "$GITHUB_OUTPUT"
          echo "Found PokeMMO version: ${VERSION}"

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build test image
        uses: docker/build-push-action@v5
        with:
          context: .
          load: true
          tags: ghcr.io/${{ github.repository_owner_id }}/${{ github.event.repository.name }}-test:${{ steps.pokemmo_version.outputs.version }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          labels: |
            maintainer=${{ github.actor }}
            org.opencontainers.image.version=${{ steps.pokemmo_version.outputs.version }}

      - name: Set up test environment
        run: |
          # Set up X11 for testing
          export DISPLAY=:99
          sudo Xvfb :99 -screen 0 1024x768x24 > /dev/null 2>&1 &
          echo "Waiting for Xvfb to start..."
          sleep 5
          
          # Verify Xvfb is running
          if ! ps aux | grep -v grep | grep Xvfb > /dev/null; then
            echo "‚ùå Xvfb failed to start"
            exit 1
          fi
          echo "‚úÖ Xvfb is running"

      - name: Run container tests
        run: |
          echo "Starting container..."
          docker run -d --name pokemmo \
            -e DISPLAY=:99 \
            -v /tmp/.X11-unix:/tmp/.X11-unix \
            ghcr.io/${{ github.repository_owner_id }}/${{ github.event.repository.name }}-test:${{ steps.pokemmo_version.outputs.version }}

          # Function to check container status
          check_container() {
            if ! docker ps -a --filter "name=pokemmo" --format "{{.Status}}" | grep -q "Up"; then
              echo "‚ùå Container failed to start or crashed"
              echo "Container logs:"
              docker logs pokemmo
              echo "Container status:"
              docker ps -a --filter "name=pokemmo"
              return 1
            fi
            return 0
          }

          # Wait for container to be fully up (max 60 seconds)
          echo "Waiting for container to start..."
          for i in {1..12}; do
            if check_container; then
              echo "‚úÖ Container is running"
              break
            fi
            if [ $i -eq 12 ]; then
              echo "‚ùå Container failed to start within 60 seconds"
              exit 1
            fi
            echo "Still waiting... (attempt $i/12)"
            sleep 5
          done

          echo "Checking Java process..."
          if ! docker exec pokemmo ps aux | grep -v grep | grep java > /dev/null; then
            echo "‚ùå Java process not running"
            docker logs pokemmo
            exit 1
          fi
          echo "‚úÖ Java process is running"

          echo "Checking ROM downloads..."
          # Wait for ROMs to download (max 120 seconds)
          for i in {1..24}; do
            if docker exec pokemmo ls -l /pokemmo/roms/ | grep -q "\.nds\|\.gba"; then
              echo "‚úÖ ROMs downloaded successfully"
              docker exec pokemmo ls -l /pokemmo/roms/
              break
            fi
            if [ $i -eq 24 ]; then
              echo "‚ùå ROM download timed out"
              docker logs pokemmo
              exit 1
            fi
            echo "Waiting for ROM downloads... (attempt $i/24)"
            sleep 5
          done

          echo "Checking for errors in logs..."
          if docker logs pokemmo 2>&1 | grep -i "error\|exception\|failed" > /dev/null; then
            echo "‚ùå Found errors in container logs:"
            docker logs pokemmo | grep -i "error\|exception\|failed"
            exit 1
          fi
          echo "‚úÖ No errors found in logs"

  publish:
    name: "üì¶ Build & Push Image"
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request'
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log into registry ${{ env.REGISTRY }}
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            # Always tag with PokeMMO version
            type=raw,value=${{ needs.test.outputs.version }}
            # Tag as latest on default branch
            type=raw,value=latest,enable=${{ github.ref == format('refs/heads/{0}', github.event.repository.default_branch) }}
            # Tag with git version if this is a version tag
            type=ref,event=tag
          labels: |
            org.opencontainers.image.title=PokeMMO Client
            org.opencontainers.image.description=PokeMMO client as X11 application
            org.opencontainers.image.version=${{ needs.test.outputs.version }}
            org.opencontainers.image.source=https://github.com/${{ github.repository }}
            org.opencontainers.image.licenses=MIT

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max 